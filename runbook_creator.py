#!/usr/bin/env python3

import requests
import json
from datetime import datetime
from requests.auth import HTTPBasicAuth
from config import CONFLUENCE_BASE_URL, EMAIL, API_TOKEN, SPACE_KEY

class RunbookCreator:
    def __init__(self):
        """Initialize the runbook creator with Confluence API credentials"""
        self.base_url = CONFLUENCE_BASE_URL
        self.email = EMAIL
        self.api_token = API_TOKEN
        self.space_key = SPACE_KEY or "DEVOPS"
        self.auth = HTTPBasicAuth(self.email, self.api_token)
        
    def generate_runbook_template(self, query: str, user_context: str = None) -> str:
        """Generate a template for a new runbook based on the user's query"""
        
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        template = f"""<h1>🔧 {query}</h1>

<div class="confluence-information-macro confluence-information-macro-note">
<div class="confluence-information-macro-body">
<p><strong>📝 Status:</strong> <span style="color: rgb(255,86,48);"><strong>DRAFT - NEEDS REVIEW</strong></span></p>
<p><strong>📅 Created:</strong> {current_time}</p>
<p><strong>👤 Requested by:</strong> User via Runbook Assistant</p>
<p><strong>🔍 Original Query:</strong> {query}</p>
</div>
</div>

<h2>📋 Overview</h2>
<p><em>This runbook was automatically created because no existing documentation was found for the query: "{query}"</em></p>

<p><strong>Please fill in the following sections:</strong></p>

<h2>🎯 Purpose</h2>
<p><em>Describe what this runbook covers and when to use it</em></p>

<h2>📚 Prerequisites</h2>
<ul>
<li><em>List any required access, tools, or knowledge</em></li>
<li><em>Add any dependencies or requirements</em></li>
</ul>

<h2>⚡ Quick Solution</h2>
<p><em>Provide the immediate steps to solve the problem</em></p>

<h2>🔧 Detailed Steps</h2>
<ol>
<li><em>Step 1: Description</em>
<ul>
<li>Command/action to take</li>
<li>Expected output</li>
</ul>
</li>
<li><em>Step 2: Description</em>
<ul>
<li>Command/action to take</li>
<li>Expected output</li>
</ul>
</li>
</ol>

<h2>✅ Verification</h2>
<p><em>How to verify the solution worked</em></p>

<h2>🚨 Troubleshooting</h2>
<table class="wrapped">
<colgroup>
<col/>
<col/>
</colgroup>
<tbody>
<tr>
<th>Problem</th>
<th>Solution</th>
</tr>
<tr>
<td><em>Common issue 1</em></td>
<td><em>How to resolve it</em></td>
</tr>
<tr>
<td><em>Common issue 2</em></td>
<td><em>How to resolve it</em></td>
</tr>
</tbody>
</table>

<h2>📞 Escalation</h2>
<ul>
<li><strong>Primary Contact:</strong> <em>Team/person responsible</em></li>
<li><strong>Secondary Contact:</strong> <em>Backup contact</em></li>
<li><strong>Slack Channel:</strong> <em>#relevant-channel</em></li>
</ul>

<h2>🔗 Related Documentation</h2>
<ul>
<li><em>Link to related runbooks</em></li>
<li><em>Link to system documentation</em></li>
<li><em>Link to monitoring dashboards</em></li>
</ul>

<div class="confluence-information-macro confluence-information-macro-warning">
<div class="confluence-information-macro-body">
<p><strong>⚠️ Action Required:</strong></p>
<ul>
<li>📝 DEVOPS team please review and complete this runbook</li>
<li>✅ Remove this warning when runbook is complete</li>
<li>🏷️ Add appropriate labels for discoverability</li>
<li>🔄 Update the Runbook Assistant index after completion</li>
</ul>
</div>
</div>

<hr/>
<p><em>Generated by Meesho Runbook Assistant on {current_time}</em></p>"""

        return template
    
    def create_runbook_page(self, query: str, user_context: str = None) -> dict:
        """Create a new runbook page in Confluence"""
        
        print(f"📝 Creating new runbook for query: '{query}'")
        
        # Generate page title
        page_title = f"Runbook: {query}"
        if len(page_title) > 100:  # Confluence title limit
            page_title = f"Runbook: {query[:80]}..."
        
        # Generate page content
        page_content = self.generate_runbook_template(query, user_context)
        
        # Prepare the page data
        page_data = {
            "type": "page",
            "title": page_title,
            "space": {
                "key": self.space_key
            },
            "body": {
                "storage": {
                    "value": page_content,
                    "representation": "storage"
                }
            },
            "metadata": {
                "labels": [
                    {"name": "runbook"},
                    {"name": "draft"},
                    {"name": "needs-review"},
                    {"name": "auto-generated"},
                    {"name": "devops-review"}
                ]
            }
        }
        
        # Create the page
        create_url = f"{self.base_url}/wiki/rest/api/content"
        headers = {
            "Accept": "application/json",
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.post(
                create_url,
                auth=self.auth,
                headers=headers,
                data=json.dumps(page_data),
                timeout=30
            )
            
            if response.status_code == 200:
                created_page = response.json()
                page_id = created_page.get("id")
                page_url = f"{self.base_url}/wiki/spaces/{self.space_key}/pages/{page_id}"
                
                print(f"✅ Successfully created runbook page: {page_id}")
                
                # Try to add additional labels via separate API call
                self.add_review_labels(page_id)
                
                return {
                    "success": True,
                    "page_id": page_id,
                    "page_url": page_url,
                    "page_title": page_title,
                    "message": f"Created new runbook draft: {page_title}"
                }
            
            else:
                print(f"❌ Failed to create page: {response.status_code}")
                print(f"Response: {response.text}")
                return {
                    "success": False,
                    "error": f"Failed to create page: {response.status_code}",
                    "message": "Could not create runbook page in Confluence"
                }
                
        except requests.exceptions.RequestException as e:
            print(f"❌ Error creating page: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "Network error while creating runbook page"
            }
    
    def add_review_labels(self, page_id: str):
        """Add review-related labels to the page"""
        try:
            labels_url = f"{self.base_url}/wiki/rest/api/content/{page_id}/label"
            
            additional_labels = [
                {"name": "pending-devops-review"},
                {"name": f"created-{datetime.now().strftime('%Y-%m')}"},
                {"name": "priority-normal"}
            ]
            
            for label in additional_labels:
                requests.post(
                    labels_url,
                    auth=self.auth,
                    headers={"Content-Type": "application/json"},
                    data=json.dumps([label]),
                    timeout=10
                )
                
        except Exception as e:
            print(f"⚠️ Could not add additional labels: {e}")
    
    def get_pending_review_runbooks(self) -> list:
        """Get list of runbooks pending review"""
        try:
            search_url = f"{self.base_url}/wiki/rest/api/content/search"
            params = {
                "cql": f"space = {self.space_key} AND label = 'needs-review' AND label = 'draft'",
                "limit": 50,
                "expand": "metadata.labels,version"
            }
            
            response = requests.get(search_url, auth=self.auth, params=params, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                results = data.get("results", [])
                
                pending_runbooks = []
                for page in results:
                    pending_runbooks.append({
                        "id": page.get("id"),
                        "title": page.get("title"),
                        "url": f"{self.base_url}/wiki/spaces/{self.space_key}/pages/{page.get('id')}",
                        "created": page.get("version", {}).get("when", ""),
                        "labels": [label.get("name") for label in page.get("metadata", {}).get("labels", {}).get("results", [])]
                    })
                
                return pending_runbooks
            
        except Exception as e:
            print(f"❌ Error getting pending reviews: {e}")
        
        return []

def main():
    """Test the runbook creator"""
    creator = RunbookCreator()
    
    # Test creating a runbook
    test_query = "How to restart stuck microservice pods in production"
    result = creator.create_runbook_page(test_query)
    
    print(f"\nResult: {result}")
    
    # Test getting pending reviews
    print(f"\n📋 Pending reviews:")
    pending = creator.get_pending_review_runbooks()
    for runbook in pending:
        print(f"  • {runbook['title']}")
        print(f"    URL: {runbook['url']}")
        print(f"    Created: {runbook['created']}")

if __name__ == "__main__":
    main() 